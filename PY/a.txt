
<<<<<<< HEAD
FROM mritd/shadowsocks
WORKDIR /code
ENV SS_MODULE ss-server
ENV SS_CONFIG "-s 0.0.0.0 -p 6443 -m chacha20-ietf-poly1305 -k test123"


RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
COPY . .
CMD ["flask", "run"]

cat > docker-compose.yml <<EOF
version: '3'
services:
  ss:
    # 从指定镜像中启动
    image: "mritd/shadowsocks"
    #设置环境变量
    environment:
        SS_MODULE: ss-server
        # -s 本地
        # -p 使用1992端口交互数据
        # -m 采用谷歌chacha20-ietf-poly1305新的加密方式
        # -k 19920818 设定密码
        SS_CONFIG: "-s 0.0.0.0 -p 1992 -m chacha20-ietf-poly1305 -k 19920818"
        #设置密码
        #PASSWORD: 19920818
    ports:
    - "1992:1992"
EOF



cat > docker-compose.yml <<EOF
version: '3'
services:
  ss:
    image: "mritd/shadowsocks"
    environment:
        SS_MODULE: ss-server
        # -s 本地
        # -p 使用1992端口交互数据
        # -m 采用谷歌chacha20-ietf-poly1305新的加密方式
        # -k 19920818 设定密码
        SS_CONFIG: -s 0.0.0.0 -p 1992 -m aes-256-cfb -k 19920818
        # 开启加速
        # KCP_FLAG: ture
        # KCP_MODULE: kcpserver
        # -t ss相关地址和端口
        # -l 监听端口可取代ss处理流量
        # KCP_CONFIG: -t 127.0.0.1:1992 -l :1993 -mode fast2
    ports:
    - "1992:1992"
    # - "1993:1993/udp"
EOF



vi ../composetest/docker-compose.yml


docker-compose up
docker-compose down

docker exec -it ss_ss_1 sh

find -name kcptun

/etc/service/kcptun




version: '3'
services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:                        映射本地磁盘到容器中
      - .:/code
    environment:
      FLASK_ENV: development        设置flask开发模式环境变量 文件热更新
  redis:
    image: "redis:alpine"
=======
生成镜像
cd doodle\cheers2019 ;
docker build -t sdator/cheers2019 .

运行镜像
docker run -it --rm sdator/cheers2019
上传镜像
docker push sdator/cheers2019

>>>>>>> b1ecd65d497fc4c79c4ae280cdb6baee7656f7e8
