
FROM mritd/shadowsocks
WORKDIR /code
ENV SS_MODULE ss-server
ENV SS_CONFIG "-s 0.0.0.0 -p 6443 -m chacha20-ietf-poly1305 -k test123"


RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
COPY . .
CMD ["flask", "run"]



cat > docker-compose.yml <<EOF
version: '3'
services:
  ss:
    # 从指定镜像中启动
    image: "mritd/shadowsocks"
    #设置环境变量
    environment:
        SS_MODULE: ss-server
        # -s 本地
        # -p 使用1992端口交互数据
        # -m 采用谷歌chacha20-ietf-poly1305新的加密方式
        # -k 19920818 设定密码
        SS_CONFIG: "-s 0.0.0.0 -p 1992 -m chacha20-ietf-poly1305 -k 19920818"
        #设置密码
        #PASSWORD: 19920818
    ports:
    - "1992:1992"
EOF


cat > docker-compose.yml <<EOF
version: '2'
services:
  cqhttp:
    image: richardchien/cqhttp:latest
      # network_mode: "host"  # 取消注释此项将使容器使用宿主机网络，此时相当于插件直接运行在宿主机，下面的 ports 可以全部删掉，另外注意根据需要配置 CQHTTP 只监听 127.0.0.1
      ports:
        - "9000:9000"  # noVNC 管理
        - "127.0.0.1:5700:5700"  # CQHTTP 默认的 HTTP 端口
        - "127.0.0.1:6700:6700"  # CQHTTP 默认的 WebSocket 端口
      restart: always  # 重启策略
      volumes:
        - ./coolq/:/home/user/coolq/  # 挂载 酷Q 主目录
      environment:
        VNC_PASSWD: PAsSwoRd  # noVNC 连接密码
        COOLQ_ACCOUNT: 2970532291  # 要登录的机器人 QQ 号
        COOLQ_URL: http://dlsec.cqp.me/cqa-tuling  # 如果使用 酷Q Air，本行可以删除，如使用 酷Q Pro，需将 URL 中的 cqa-tuling 改为 cqp-tuling
        FORCE_ENV: "true"  # 强制使用环境变量中的配置（下面以 CQHTTP_ 开头的那些），这会使手动对 CQHTTP 配置文件的修改在重启容器后失效，删除此项则下面的配置只在容器第一次启动时写入配置文件
        CQHTTP_POST_URL: http://172.17.0.1:8080  # HTTP 上报地址，172.17.0.1 通常是宿主机在默认网桥上的 IP 地址，可通过 docker inspect bridge 查看
        CQHTTP_SERVE_DATA_FILES: "true"
        CQHTTP_USE_WS: "true"
        # 更多其它配置项
EOF


docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' pp


docker inspect --format '已绑定端口列表：{{println}}{{range $p,$conf := .NetworkSettings.Ports}}{{$p}} -> {{(index $conf 0).HostPort}}{{println}}{{end}}' cq_core



cat > docker-compose.yml <<EOF
version: '3'
services:
  ss:
    image: "mritd/shadowsocks"
    environment:
        SS_MODULE: ss-server
        # -s 本地
        # -p 使用1992端口交互数据
        # -m 采用谷歌chacha20-ietf-poly1305新的加密方式
        # -k 19920818 设定密码
        SS_CONFIG: -s 0.0.0.0 -p 1992 -m aes-256-cfb -k 19920818
        # 开启加速
        # KCP_FLAG: ture
        # KCP_MODULE: kcpserver
        # -t ss相关地址和端口
        # -l 监听端口可取代ss处理流量
        # KCP_CONFIG: -t 127.0.0.1:1992 -l :1993 -mode fast2
    ports:
    - "1992:1992"
    # - "1993:1993/udp"
EOF



vi ../composetest/docker-compose.yml


docker-compose up
docker-compose down

docker exec -it ss_ss_1 sh

find -name kcptun

/etc/service/kcptun




version: '3'
services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:                        映射本地磁盘到容器中
      - .:/code
    environment:
      FLASK_ENV: development        设置flask开发模式环境变量 文件热更新
  redis:
    image: "redis:alpine"
生成镜像
cd doodle\cheers2019 ;
docker build -t sdator/cheers2019 .

运行镜像
docker run -it --rm sdator/cheers2019
上传镜像
docker push sdator/cheers2019

 116.29.140.239
http://209.250.236.243:15700/send_private_msg?user_id=250740270&message=你好



scp -r . ss:~/cq/

scp -r /C/Git/MyCode/PY/CQ/* ss:~/cq/


/C/Git/MyCode/PY/CQ

mklink /D "%systemdrive%\DemoAir" "%~dp0"


ln -s $(pwd) /C/Git/MyCode/PY/CQ/


启动停止了的容器服务
docker-compose up --no-recreate


强制删除容器
docker rm -f xxx
docker network disconnect --force bridge/host xxx
docker network inspect bridge/host